Composite Key
Way 1:
	create a class defining key members as attributes
	Add @Embeddable at class level, This indicates this would be embedded in other entity
	implements Serializable
	Define hascode and equals method
	Ex - EmployeeEntryId
	Add this is attribute in EmployeeEntity class with @EmbeddedId annotation
Way 2:
	Not add @Embeddable at EmployeeEntryId. other would remain same
	
One-to-one relationship: - In dbase implemented as Foreign key
	EmployeeContactInfo -> Employee
	create table employee (id integer not null, first_name varchar(255), job varchar(255), 
				last_name varchar(255), salary double, primary key (id))
	create table employee_contact_info (address varchar(255), phone_num varchar(255), 
				employee_id integer not null, primary key (employee_id))
	alter table employee_contact_info add constraint FKe6sk8libwjwy3orf1hampnbgx 
				foreign key (employee_id) references employee
	
	Employee [id=6, firstName=Peter, lastName=Holand, job=Manager, salary=12000.0, contactInfo=EmployeeContactInfo [id=6, address=Address 1, phoneNum=Number 1]]
	EmployeeContactInfo [id=6, address=Address 1, phoneNum=Number 1]
	
One-to-Many relationship:
	Employee -> Department
	Department can have many employees - OneToMany
	Employee can belong to only one department - ManyToOne
	Many side - owning type
	One side - referencing type
	Many side, owning side would have foreign key i.e Employee
	
	create table department (department_id integer generated by default as identity, 
						location varchar(255), name varchar(255), primary key (department_id))
	create table employee (id integer not null, first_name varchar(255), job varchar(255), 
					last_name varchar(255), salary double, department_id integer not null, primary key (id))
	alter table employee add constraint FKbejtwvg9bxus2mffsm3swj3u9 foreign key (department_id) references department
	
	Employee [id=1, firstName=Peter, lastName=Holand, job=Manager, salary=12000.0, contactInfo=EmployeeContactInfo [id=1, address=Address 1, phoneNum=Number 1]]
	Department [id=1, name=Accounts, location=Floor 1]
	
Many-to-Many Relationship:
	Employee -> Project
	mappedBy should be specified on any one side
	separate relationship table would be created in DBase
	
	create table employee (id integer not null, first_name varchar(255), job varchar(255), 
						last_name varchar(255), salary double, department_id integer not null, primary key (id))
	create table project (project_id integer generated by default as identity, project_deadline date, 
						project_name varchar(255), primary key (project_id))
	create table employees_projects (employee_id integer not null, projectid integer not null, 
						primary key (employee_id, projectid))
	alter table employees_projects add constraint FKlp2melciuhn0m9e6rgbyor1me foreign key (projectid) references project
	alter table employees_projects add constraint FKicms2qddrg3fa7tsd8f40da2i foreign key (employee_id) references employee
	
	
	
	
	