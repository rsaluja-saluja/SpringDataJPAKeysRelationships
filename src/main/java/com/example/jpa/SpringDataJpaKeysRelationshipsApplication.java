package com.example.jpa;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

import com.example.jpa.model.Department;
import com.example.jpa.model.Employee;
import com.example.jpa.model.EmployeeContactInfo;
import com.example.jpa.model.EmployeeEntry;
import com.example.jpa.model.EmployeeEntryCKWay2;
import com.example.jpa.model.Project;
import com.example.jpa.repo.DepartmentRepository;
import com.example.jpa.repo.EmployeeContactInfoRepo;
import com.example.jpa.repo.EmployeeEntryCKWay2Repo;
import com.example.jpa.repo.EmployeeEntryRepo;
import com.example.jpa.repo.EmployeeRepository;
import com.example.jpa.repo.ProjectRepo;

@SpringBootApplication
public class SpringDataJpaKeysRelationshipsApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringDataJpaKeysRelationshipsApplication.class, args);
	}

	@Bean
	public CommandLineRunner employeeDemo(EmployeeRepository empRepo, 
											DepartmentRepository depRepo, 
											EmployeeEntryRepo empEntryRepo,
											EmployeeEntryCKWay2Repo empEntryCKWay2Repo,
											EmployeeContactInfoRepo contactRepo,
											ProjectRepo projRepo) {
		return (args) -> {
			//With manual generated ID
//			empRepo.save(new Employee(1, "Peter", "Holand", "Manager", 12000d));
//			empRepo.save(new Employee(2, "John", "Mill", "Tester", 10000d));
//			empRepo.save(new Employee(3, "James", "William", "Developer", 11000d));
//			//empRepo.save(new Employee()); //gives exception
//			// org.springframework.orm.jpa.JpaSystemException: ids for this 
//			//class must be manually assigned before calling save():
//			
//			// Below would work after setting Primary Key
//			Employee e = new Employee();
//			e.setId(4);
//			empRepo.save(e);
			
//			// With autogenerated id - create hiberate_sequence also that would maintain the id current value used and gives next value also
//			empRepo.save(new Employee("Peter", "Holand", "Manager", 12000d));
//			empRepo.save(new Employee("John", "Mill", "Tester", 10000d));
//			empRepo.save(new Employee("James", "William", "Developer", 11000d));
//			empRepo.save(new Employee()); // It works as id is autogenerated
//			
////			// Below would work also after setting Primary Key
//			Employee e = new Employee();
//			e.setId(6);
//			empRepo.save(e); // emp added with d 5 instead of provided value 6
//			
//			System.out.println("**** Employee Data ****");
//			empRepo.findAll().forEach(emp -> System.out.println(emp.toString()));
////			for(Employee emp : empRepo.findAll()) {
////				System.out.println(emp.toString());
////			}
//			
//			depRepo.save(new Department("Tech", "Floor 3"));
//			depRepo.save(new Department("Research", "Floor 5"));
//			
//			System.out.println("*** Department Data ****");
//			depRepo.findAll().forEach(System.out::println);
//			
//			System.out.println("**** EMployee Entity with Composite Key ****");
//			empEntryRepo.save(new EmployeeEntry(1,LocalDate.now(),LocalTime.now()));
//			empEntryRepo.save(new EmployeeEntry(1,LocalDate.now().minusDays(1),LocalTime.now()));
//			empEntryRepo.save(new EmployeeEntry(2,LocalDate.now(),LocalTime.now()));
//			
//			empEntryRepo.findAll().forEach(System.out::println);
//			
//			System.out.println("**** Employee Entity Composite Key Way 2 ****");
//			empEntryCKWay2Repo.save(new EmployeeEntryCKWay2(1,LocalDate.now(),LocalTime.now()));
//			empEntryCKWay2Repo.save(new EmployeeEntryCKWay2(1,LocalDate.now().minusDays(1),LocalTime.now()));
//			empEntryCKWay2Repo.save(new EmployeeEntryCKWay2(2,LocalDate.now(),LocalTime.now()));
//			
//			empEntryCKWay2Repo.findAll().forEach(System.out::println);
//			
//			System.out.println("****** One-to-One Relationship ******");
//			
//			empRepo.deleteAll(); //clear the table data
//			
//			EmployeeContactInfo c1 = new EmployeeContactInfo("Address 1", "Number 1");
//			EmployeeContactInfo c2 = new EmployeeContactInfo("Address 2", "Number 2");
//			EmployeeContactInfo c3 = new EmployeeContactInfo("Address 3", "Number 3");
//			
//			Employee emp1 = new Employee("Peter", "Holand", "Manager", 12000d);
//			Employee emp2 = new Employee("John", "Mill", "Tester", 10000d);
//			Employee emp3 = new Employee("James", "William", "Developer", 11000d);
//			
//			emp1.setContactInfo(c1);
//			emp2.setContactInfo(c2);
//			//emp3.setContactInfo(c3);
//
//			empRepo.save(emp1);
//			empRepo.save(emp2);
//			empRepo.save(emp3);
//			
//			contactRepo.save(c1);
//			contactRepo.save(c2);
//			//contactRepo.save(c3);
//			
//			System.out.println("**** Employee Data ****");
//			empRepo.findAll().forEach(emp -> System.out.println(emp.toString()));
//
//			System.out.println("**** EMployee Contact Info ****");
//			contactRepo.findAll().forEach(System.out::println);
			
//			System.out.println("****** One-to-Many Relationship ******");
//			
//			empRepo.deleteAll(); //clear the table data
//			contactRepo.deleteAll();
//			depRepo.deleteAll();
//			
//			EmployeeContactInfo c_1 = new EmployeeContactInfo("Address 1", "Number 1");
//			EmployeeContactInfo c_2 = new EmployeeContactInfo("Address 2", "Number 2");
//			EmployeeContactInfo c_3 = new EmployeeContactInfo("Address 3", "Number 3");
//			
//			Employee emp_1 = new Employee("Peter", "Holand", "Manager", 12000d);
//			Employee emp_2 = new Employee("John", "Mill", "Tester", 10000d);
//			Employee emp_3 = new Employee("James", "William", "Developer", 11000d);
//			
//			Department d_1 = new Department("Accounts", "Floor 1");
//			Department d_2 = new Department("Computers", "Floor 2");
//			
//			emp_1.setContactInfo(c_1);
//			emp_2.setContactInfo(c_2);
//			emp_3.setContactInfo(c_3);
//			
//			emp_1.setDepartment(d_1);
//			emp_2.setDepartment(d_2);
//			emp_3.setDepartment(d_2);
//			
//			depRepo.save(d_1);
//			depRepo.save(d_2);
//			
//			empRepo.save(emp_1);
//			empRepo.save(emp_2);
//			empRepo.save(emp_3);
//			
//			contactRepo.save(c_1);
//			contactRepo.save(c_2);
//			contactRepo.save(c_3);
//			
//			
//			
//			System.out.println("**** Employee Data ****");
//			empRepo.findAll().forEach(emp -> System.out.println(emp.toString()));
//
//			System.out.println("**** EMployee Contact Info ****");
//			contactRepo.findAll().forEach(System.out::println);
//			
//			System.out.println("**** EMployee Department Info ****");
//			depRepo.findAll().forEach(System.out::println);
			
			System.out.println("****** Many-to-Many Relationship ******");
			
			empRepo.deleteAll(); //clear the table data
			contactRepo.deleteAll();
			depRepo.deleteAll();
			
			EmployeeContactInfo c_1 = new EmployeeContactInfo("Address 1", "Number 1");
			EmployeeContactInfo c_2 = new EmployeeContactInfo("Address 2", "Number 2");
			EmployeeContactInfo c_3 = new EmployeeContactInfo("Address 3", "Number 3");
			
			Employee emp_1 = new Employee("Peter", "Holand", "Manager", 12000d);
			Employee emp_2 = new Employee("John", "Mill", "Tester", 10000d);
			Employee emp_3 = new Employee("James", "William", "Developer", 11000d);
			
			Department d_1 = new Department("Accounts", "Floor 1");
			Department d_2 = new Department("Computers", "Floor 2");
			
			Project proj1 = new Project("Release Automation", LocalDate.of(2021, 11	, 25));
			Project proj2 = new Project("Machine Learning", LocalDate.of(2022, 12	, 1));

			
			emp_1.setContactInfo(c_1);
			emp_2.setContactInfo(c_2);
			emp_3.setContactInfo(c_3);
			
			emp_1.setDepartment(d_1);
			emp_2.setDepartment(d_2);
			emp_3.setDepartment(d_2);
			
			depRepo.save(d_1);
			depRepo.save(d_2);
			
			projRepo.save(proj1);
			projRepo.save(proj2);

			emp_1.addProjects(proj1);
			emp_2.addProjects(proj1);
			emp_3.addProjects(proj1);
			emp_3.addProjects(proj2);
			
			empRepo.save(emp_1);
			empRepo.save(emp_2);
			empRepo.save(emp_3);
			
			contactRepo.save(c_1);
			contactRepo.save(c_2);
			contactRepo.save(c_3);
			
			
			
			System.out.println("**** Employee Data ****");
			empRepo.findAll().forEach(emp -> System.out.println(emp.toString()));

			System.out.println("**** EMployee Contact Info ****");
			contactRepo.findAll().forEach(System.out::println);
			
			System.out.println("**** EMployee Department Info ****");
			depRepo.findAll().forEach(System.out::println);
			
			System.out.println("**** EMployee Project Info ****");
			projRepo.findAll().forEach(System.out::println);
		};
	}
}
//Hibernate: create table department (id integer generated by default as identity, location varchar(255), name varchar(255), primary key (id))
//Hibernate: create table employee (id integer not null, first_name varchar(255), job varchar(255), last_name varchar(255), salary double, primary key (id))
//Hibernate: create sequence hibernate_sequence start with 1 increment by 1
